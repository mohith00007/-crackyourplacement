problem 1
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

class Solution {
    public int findDuplicate(int[] nums) {
       Arrays.sort(nums);
        int l=nums.length-1;
        for(int i=0;i<l;i++){
            int k=nums[i]^nums[i+1];
            if(k==0){
                k=nums[i];
                return k ;
            }
        }return 0;
    }
}

problem 2
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.
solution:
class Solution {
    public void sortColors(int[] nums) {
        int l=nums.length;
        int n0=0;
        int n1=0;
        int n2=0;
        for(int i=0;i<l;i++){
            if (nums[i]==0)
                n0=n0+1;
            else if(nums[i]==1)
                n1=n1+1;
            else
                n2=n2+1;
            }
        int k=0;
        for(int i=0;i<n0;i++){
            nums[k]=0;
            k++;
        }
        for(int i=0;i<n1;i++){
            nums[k]=1;
            k++;
        }
        for(int i=0;i<n2;i++){
            nums[k]=2;
            k++;
        }
        
      problem 3:
      Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

class Solution {
    public int removeDuplicates(int[] nums) {
        int i=1,k=1;
        int l=nums.length;
        if(l==1)
            return 1;
        while(k<l){
            if(nums[k]==nums[k-1])
                k=k+1;
            else
            { nums[i]=nums[k];
                i=i+1;
                k=k+1;}
        }return i;
    }
}
problem 4:

         
